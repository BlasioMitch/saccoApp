/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation CreateUser($user: UserInput) {\n    createUser(user: $user) {\n      id\n      first_name\n      last_name\n      other_name\n      email\n      role\n      status\n      lastLogin\n      joinDate\n      contact\n      gender\n      dob\n      hasAccount\n      fullName\n    }\n  }\n": typeof types.CreateUserDocument,
    "\n  mutation UpdateUser($updateUserId: ID!, $updateData: UserUpdateInput) {\n    updateUser(id: $updateUserId, updateData: $updateData) {\n      id\n      first_name\n      last_name\n      other_name\n      email\n      role\n      status\n      lastLogin\n      joinDate\n      contact\n      gender\n      dob\n      hasAccount\n      fullName\n    }\n  }\n": typeof types.UpdateUserDocument,
    "\n  mutation DeleteUser($deleteUserId: ID!) {\n  deleteUser(id: $deleteUserId)\n}\n": typeof types.DeleteUserDocument,
    "\n  mutation CreateAccount($account: AccountInput) {\n    createAccount(account: $account) {\n      id\n      userId\n      accountNumber\n      balance\n      status\n      paidMembership\n      hasLoan\n      is_deleted\n      deleted_at\n      owner {\n        id\n        first_name\n        last_name\n        other_name\n        email\n        role\n        status\n        lastLogin\n        joinDate\n        contact\n        gender\n        dob\n        hasAccount\n        fullName\n      }\n    }\n  }\n": typeof types.CreateAccountDocument,
    "\n  mutation UpdateAccount($updateAccountId: String!, $balance: Int, $status: ACCOUNTSTATUS, $paidMembership: Boolean) {\n  updateAccount(id: $updateAccountId, balance: $balance, status: $status, paidMembership: $paidMembership) {\n    id\n    userId\n    accountNumber\n    balance\n    status\n    paidMembership\n    hasLoan\n    is_deleted\n    deleted_at\n    owner {\n      id\n      first_name\n      last_name\n      other_name\n      email\n      role\n      status\n      lastLogin\n      joinDate\n      contact\n      gender\n      dob\n      hasAccount\n      fullName\n    }\n  }\n}\n": typeof types.UpdateAccountDocument,
    "\nmutation DeleteAccount($deleteAccountId: String!) {\n  deleteAccount(id: $deleteAccountId)\n}\n": typeof types.DeleteAccountDocument,
    "\n  mutation CreateLoan($loan: LoanInput) {\n    createLoan(loan: $loan) {\n      id\n      accountId\n      amount\n      interestRate\n      status\n      endDate\n      startDate\n      term\n      summary {\n        id\n        loanId\n        monthlyPayment\n        totalInterest\n        remainingBalance\n      }\n      createAt\n      updateAt\n    }\n  }\n": typeof types.CreateLoanDocument,
    "\n  mutation UpdateLoan($updateLoanId: String!, $accountId: String, $amount: Int, $interestRate: Float, $status: LOANSTATUS, $endDate: String, $startDate: String, $term: Int) {\n  updateLoan(id: $updateLoanId, accountId: $accountId, amount: $amount, interestRate: $interestRate, status: $status, endDate: $endDate, startDate: $startDate, term: $term) {\n    id\n    accountId\n    amount\n    interestRate\n    status\n    endDate\n    startDate\n    term\n    summary {\n      id\n      loanId\n      monthlyPayment\n      totalInterest\n      remainingBalance\n    }\n    createAt\n    updateAt\n    account {\n      id\n      userId\n      accountNumber\n      balance\n      status\n      paidMembership\n      hasLoan\n      is_deleted\n      deleted_at\n    }\n  }\n}\n": typeof types.UpdateLoanDocument,
    "\n  mutation DeleteLoan($deleteLoanId: String!) {\n  deleteLoan(id: $deleteLoanId)\n}\n": typeof types.DeleteLoanDocument,
    "\n  mutation CreateTransaction($transaction: TransactionInput) {\n    createTransaction(transaction: $transaction) {\n      id\n      type\n      amount\n      accountId\n      acountName\n      status\n      description\n      loanId\n      createdAt\n      updateAt\n    }\n  }\n": typeof types.CreateTransactionDocument,
    "\n  mutation UpdateTransaction($updateTransactionId: String!, $type: TRANSACTIONTYPE, $amount: Float, $accountId: String, $status: TRANSACTIONSTATUS, $description: String, $loanId: String) {\n  updateTransaction(id: $updateTransactionId, type: $type, amount: $amount, accountId: $accountId, status: $status, description: $description, loanId: $loanId) {\n    id\n    type\n    amount\n    accountId\n    acountName\n    status\n    description\n    loanId\n    createdAt\n    updateAt\n  }\n}\n": typeof types.UpdateTransactionDocument,
    "\n  mutation DeleteTransaction($deleteTransactionId: String!) {\n  deleteTransaction(id: $deleteTransactionId)\n}\n": typeof types.DeleteTransactionDocument,
    "\n  mutation Mutation($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    token\n    user {\n      id\n      first_name\n      last_name\n      other_name\n      email\n      role\n      status\n      lastLogin\n      joinDate\n      contact\n      gender\n      dob\n      hasAccount\n      fullName\n    }\n  }\n}\n": typeof types.MutationDocument,
    "\n  query GetUsers {\n    getUsers {\n      id\n      first_name\n      last_name\n      other_name\n      email\n      role\n      status\n      lastLogin\n      joinDate\n      contact\n      gender\n      dob\n      hasAccount\n      fullName\n      account {\n        id\n        userId\n        accountNumber\n        balance\n        status\n        paidMembership\n        hasLoan\n        is_deleted\n        deleted_at\n      }\n    }\n  }\n\n": typeof types.GetUsersDocument,
    "\nquery GetUserById($getUserByIdId: ID!) {\n  getUserById(id: $getUserByIdId) {\n    id\n    first_name\n    last_name\n    other_name\n    email\n    role\n    status\n    lastLogin\n    joinDate\n    contact\n    gender\n    dob\n    hasAccount\n    fullName\n    account {\n      id\n      userId\n      accountNumber\n      balance\n      status\n      paidMembership\n      hasLoan\n      is_deleted\n      deleted_at\n      loans {\n        id\n        accountId\n        amount\n        interestRate\n        status\n        endDate\n        startDate\n        term\n        summary {\n          id\n          loanId\n          monthlyPayment\n          totalInterest\n          remainingBalance\n        }\n        createAt\n        updateAt\n      }\n      transactions {\n        id\n        type\n        amount\n        accountId\n        acountName\n        status\n        description\n        loanId\n        createdAt\n        updateAt\n      }\n    }\n  }\n}\n\n": typeof types.GetUserByIdDocument,
    "\n  query GetAccounts {\n    getAccounts {\n      id\n      userId\n      accountNumber\n      balance\n      status\n      paidMembership\n      hasLoan\n      is_deleted\n      deleted_at\n      owner {\n        id\n        first_name\n        last_name\n        other_name\n        email\n        role\n        status\n        lastLogin\n        joinDate\n        contact\n        gender\n        dob\n        hasAccount\n        fullName\n      }\n      loans {\n        id\n        amount\n        interestRate\n        status\n        endDate\n        startDate\n        term\n        summary {\n          id\n          monthlyPayment\n          totalInterest\n          remainingBalance\n        }\n        createAt\n        updateAt\n      }\n      transactions {\n        id\n        type\n        amount\n        status\n        description\n        loanId\n        createdAt\n        updateAt\n      }\n    }\n  }\n": typeof types.GetAccountsDocument,
    "\n  query GetAccountById($getAccountByIdId: String!) {\n    getAccountById(id: $getAccountByIdId) {\n      id\n      userId\n      accountNumber\n      balance\n      status\n      paidMembership\n      hasLoan\n      is_deleted\n      deleted_at\n      owner {\n        id\n        first_name\n        last_name\n        other_name\n        email\n        role\n        status\n        lastLogin\n        joinDate\n        contact\n        gender\n        dob\n        hasAccount\n        fullName\n      }\n      loans {\n        id\n        accountId\n        amount\n        interestRate\n        status\n        endDate\n        startDate\n        term\n        summary {\n          id\n          monthlyPayment\n          totalInterest\n          remainingBalance\n        }\n        createAt\n        updateAt\n      }\n      transactions {\n        id\n        type\n        amount\n        accountId\n        acountName\n        status\n        description\n        loanId\n        createdAt\n        updateAt\n      }\n    }\n  }\n": typeof types.GetAccountByIdDocument,
    "\n  query GetLoans {\n    getLoans {\n      id\n      accountId\n      amount\n      interestRate\n      status\n      endDate\n      startDate\n      term\n      summary {\n        id\n        loanId\n        monthlyPayment\n        totalInterest\n        remainingBalance\n      }\n      createAt\n      updateAt\n      account {\n        id\n        userId\n        accountNumber\n        balance\n        status\n        paidMembership\n        hasLoan\n        is_deleted\n        deleted_at\n        owner {\n          id\n          first_name\n          last_name\n          other_name\n          email\n          role\n          status\n          lastLogin\n          joinDate\n          contact\n          gender\n          dob\n          hasAccount\n          fullName\n        }\n      }\n    }\n  }\n": typeof types.GetLoansDocument,
    "\n  query GetTransactions {\n    getTransactions {\n      id\n      type\n      amount\n      accountId\n      acountName\n      status\n      description\n      loanId\n      createdAt\n      updateAt\n      account {\n        id\n        accountNumber\n        owner {\n          fullName\n          id\n        }\n      }\n    }\n  }\n": typeof types.GetTransactionsDocument,
};
const documents: Documents = {
    "\n  mutation CreateUser($user: UserInput) {\n    createUser(user: $user) {\n      id\n      first_name\n      last_name\n      other_name\n      email\n      role\n      status\n      lastLogin\n      joinDate\n      contact\n      gender\n      dob\n      hasAccount\n      fullName\n    }\n  }\n": types.CreateUserDocument,
    "\n  mutation UpdateUser($updateUserId: ID!, $updateData: UserUpdateInput) {\n    updateUser(id: $updateUserId, updateData: $updateData) {\n      id\n      first_name\n      last_name\n      other_name\n      email\n      role\n      status\n      lastLogin\n      joinDate\n      contact\n      gender\n      dob\n      hasAccount\n      fullName\n    }\n  }\n": types.UpdateUserDocument,
    "\n  mutation DeleteUser($deleteUserId: ID!) {\n  deleteUser(id: $deleteUserId)\n}\n": types.DeleteUserDocument,
    "\n  mutation CreateAccount($account: AccountInput) {\n    createAccount(account: $account) {\n      id\n      userId\n      accountNumber\n      balance\n      status\n      paidMembership\n      hasLoan\n      is_deleted\n      deleted_at\n      owner {\n        id\n        first_name\n        last_name\n        other_name\n        email\n        role\n        status\n        lastLogin\n        joinDate\n        contact\n        gender\n        dob\n        hasAccount\n        fullName\n      }\n    }\n  }\n": types.CreateAccountDocument,
    "\n  mutation UpdateAccount($updateAccountId: String!, $balance: Int, $status: ACCOUNTSTATUS, $paidMembership: Boolean) {\n  updateAccount(id: $updateAccountId, balance: $balance, status: $status, paidMembership: $paidMembership) {\n    id\n    userId\n    accountNumber\n    balance\n    status\n    paidMembership\n    hasLoan\n    is_deleted\n    deleted_at\n    owner {\n      id\n      first_name\n      last_name\n      other_name\n      email\n      role\n      status\n      lastLogin\n      joinDate\n      contact\n      gender\n      dob\n      hasAccount\n      fullName\n    }\n  }\n}\n": types.UpdateAccountDocument,
    "\nmutation DeleteAccount($deleteAccountId: String!) {\n  deleteAccount(id: $deleteAccountId)\n}\n": types.DeleteAccountDocument,
    "\n  mutation CreateLoan($loan: LoanInput) {\n    createLoan(loan: $loan) {\n      id\n      accountId\n      amount\n      interestRate\n      status\n      endDate\n      startDate\n      term\n      summary {\n        id\n        loanId\n        monthlyPayment\n        totalInterest\n        remainingBalance\n      }\n      createAt\n      updateAt\n    }\n  }\n": types.CreateLoanDocument,
    "\n  mutation UpdateLoan($updateLoanId: String!, $accountId: String, $amount: Int, $interestRate: Float, $status: LOANSTATUS, $endDate: String, $startDate: String, $term: Int) {\n  updateLoan(id: $updateLoanId, accountId: $accountId, amount: $amount, interestRate: $interestRate, status: $status, endDate: $endDate, startDate: $startDate, term: $term) {\n    id\n    accountId\n    amount\n    interestRate\n    status\n    endDate\n    startDate\n    term\n    summary {\n      id\n      loanId\n      monthlyPayment\n      totalInterest\n      remainingBalance\n    }\n    createAt\n    updateAt\n    account {\n      id\n      userId\n      accountNumber\n      balance\n      status\n      paidMembership\n      hasLoan\n      is_deleted\n      deleted_at\n    }\n  }\n}\n": types.UpdateLoanDocument,
    "\n  mutation DeleteLoan($deleteLoanId: String!) {\n  deleteLoan(id: $deleteLoanId)\n}\n": types.DeleteLoanDocument,
    "\n  mutation CreateTransaction($transaction: TransactionInput) {\n    createTransaction(transaction: $transaction) {\n      id\n      type\n      amount\n      accountId\n      acountName\n      status\n      description\n      loanId\n      createdAt\n      updateAt\n    }\n  }\n": types.CreateTransactionDocument,
    "\n  mutation UpdateTransaction($updateTransactionId: String!, $type: TRANSACTIONTYPE, $amount: Float, $accountId: String, $status: TRANSACTIONSTATUS, $description: String, $loanId: String) {\n  updateTransaction(id: $updateTransactionId, type: $type, amount: $amount, accountId: $accountId, status: $status, description: $description, loanId: $loanId) {\n    id\n    type\n    amount\n    accountId\n    acountName\n    status\n    description\n    loanId\n    createdAt\n    updateAt\n  }\n}\n": types.UpdateTransactionDocument,
    "\n  mutation DeleteTransaction($deleteTransactionId: String!) {\n  deleteTransaction(id: $deleteTransactionId)\n}\n": types.DeleteTransactionDocument,
    "\n  mutation Mutation($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    token\n    user {\n      id\n      first_name\n      last_name\n      other_name\n      email\n      role\n      status\n      lastLogin\n      joinDate\n      contact\n      gender\n      dob\n      hasAccount\n      fullName\n    }\n  }\n}\n": types.MutationDocument,
    "\n  query GetUsers {\n    getUsers {\n      id\n      first_name\n      last_name\n      other_name\n      email\n      role\n      status\n      lastLogin\n      joinDate\n      contact\n      gender\n      dob\n      hasAccount\n      fullName\n      account {\n        id\n        userId\n        accountNumber\n        balance\n        status\n        paidMembership\n        hasLoan\n        is_deleted\n        deleted_at\n      }\n    }\n  }\n\n": types.GetUsersDocument,
    "\nquery GetUserById($getUserByIdId: ID!) {\n  getUserById(id: $getUserByIdId) {\n    id\n    first_name\n    last_name\n    other_name\n    email\n    role\n    status\n    lastLogin\n    joinDate\n    contact\n    gender\n    dob\n    hasAccount\n    fullName\n    account {\n      id\n      userId\n      accountNumber\n      balance\n      status\n      paidMembership\n      hasLoan\n      is_deleted\n      deleted_at\n      loans {\n        id\n        accountId\n        amount\n        interestRate\n        status\n        endDate\n        startDate\n        term\n        summary {\n          id\n          loanId\n          monthlyPayment\n          totalInterest\n          remainingBalance\n        }\n        createAt\n        updateAt\n      }\n      transactions {\n        id\n        type\n        amount\n        accountId\n        acountName\n        status\n        description\n        loanId\n        createdAt\n        updateAt\n      }\n    }\n  }\n}\n\n": types.GetUserByIdDocument,
    "\n  query GetAccounts {\n    getAccounts {\n      id\n      userId\n      accountNumber\n      balance\n      status\n      paidMembership\n      hasLoan\n      is_deleted\n      deleted_at\n      owner {\n        id\n        first_name\n        last_name\n        other_name\n        email\n        role\n        status\n        lastLogin\n        joinDate\n        contact\n        gender\n        dob\n        hasAccount\n        fullName\n      }\n      loans {\n        id\n        amount\n        interestRate\n        status\n        endDate\n        startDate\n        term\n        summary {\n          id\n          monthlyPayment\n          totalInterest\n          remainingBalance\n        }\n        createAt\n        updateAt\n      }\n      transactions {\n        id\n        type\n        amount\n        status\n        description\n        loanId\n        createdAt\n        updateAt\n      }\n    }\n  }\n": types.GetAccountsDocument,
    "\n  query GetAccountById($getAccountByIdId: String!) {\n    getAccountById(id: $getAccountByIdId) {\n      id\n      userId\n      accountNumber\n      balance\n      status\n      paidMembership\n      hasLoan\n      is_deleted\n      deleted_at\n      owner {\n        id\n        first_name\n        last_name\n        other_name\n        email\n        role\n        status\n        lastLogin\n        joinDate\n        contact\n        gender\n        dob\n        hasAccount\n        fullName\n      }\n      loans {\n        id\n        accountId\n        amount\n        interestRate\n        status\n        endDate\n        startDate\n        term\n        summary {\n          id\n          monthlyPayment\n          totalInterest\n          remainingBalance\n        }\n        createAt\n        updateAt\n      }\n      transactions {\n        id\n        type\n        amount\n        accountId\n        acountName\n        status\n        description\n        loanId\n        createdAt\n        updateAt\n      }\n    }\n  }\n": types.GetAccountByIdDocument,
    "\n  query GetLoans {\n    getLoans {\n      id\n      accountId\n      amount\n      interestRate\n      status\n      endDate\n      startDate\n      term\n      summary {\n        id\n        loanId\n        monthlyPayment\n        totalInterest\n        remainingBalance\n      }\n      createAt\n      updateAt\n      account {\n        id\n        userId\n        accountNumber\n        balance\n        status\n        paidMembership\n        hasLoan\n        is_deleted\n        deleted_at\n        owner {\n          id\n          first_name\n          last_name\n          other_name\n          email\n          role\n          status\n          lastLogin\n          joinDate\n          contact\n          gender\n          dob\n          hasAccount\n          fullName\n        }\n      }\n    }\n  }\n": types.GetLoansDocument,
    "\n  query GetTransactions {\n    getTransactions {\n      id\n      type\n      amount\n      accountId\n      acountName\n      status\n      description\n      loanId\n      createdAt\n      updateAt\n      account {\n        id\n        accountNumber\n        owner {\n          fullName\n          id\n        }\n      }\n    }\n  }\n": types.GetTransactionsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateUser($user: UserInput) {\n    createUser(user: $user) {\n      id\n      first_name\n      last_name\n      other_name\n      email\n      role\n      status\n      lastLogin\n      joinDate\n      contact\n      gender\n      dob\n      hasAccount\n      fullName\n    }\n  }\n"): (typeof documents)["\n  mutation CreateUser($user: UserInput) {\n    createUser(user: $user) {\n      id\n      first_name\n      last_name\n      other_name\n      email\n      role\n      status\n      lastLogin\n      joinDate\n      contact\n      gender\n      dob\n      hasAccount\n      fullName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUser($updateUserId: ID!, $updateData: UserUpdateInput) {\n    updateUser(id: $updateUserId, updateData: $updateData) {\n      id\n      first_name\n      last_name\n      other_name\n      email\n      role\n      status\n      lastLogin\n      joinDate\n      contact\n      gender\n      dob\n      hasAccount\n      fullName\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUser($updateUserId: ID!, $updateData: UserUpdateInput) {\n    updateUser(id: $updateUserId, updateData: $updateData) {\n      id\n      first_name\n      last_name\n      other_name\n      email\n      role\n      status\n      lastLogin\n      joinDate\n      contact\n      gender\n      dob\n      hasAccount\n      fullName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteUser($deleteUserId: ID!) {\n  deleteUser(id: $deleteUserId)\n}\n"): (typeof documents)["\n  mutation DeleteUser($deleteUserId: ID!) {\n  deleteUser(id: $deleteUserId)\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateAccount($account: AccountInput) {\n    createAccount(account: $account) {\n      id\n      userId\n      accountNumber\n      balance\n      status\n      paidMembership\n      hasLoan\n      is_deleted\n      deleted_at\n      owner {\n        id\n        first_name\n        last_name\n        other_name\n        email\n        role\n        status\n        lastLogin\n        joinDate\n        contact\n        gender\n        dob\n        hasAccount\n        fullName\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateAccount($account: AccountInput) {\n    createAccount(account: $account) {\n      id\n      userId\n      accountNumber\n      balance\n      status\n      paidMembership\n      hasLoan\n      is_deleted\n      deleted_at\n      owner {\n        id\n        first_name\n        last_name\n        other_name\n        email\n        role\n        status\n        lastLogin\n        joinDate\n        contact\n        gender\n        dob\n        hasAccount\n        fullName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateAccount($updateAccountId: String!, $balance: Int, $status: ACCOUNTSTATUS, $paidMembership: Boolean) {\n  updateAccount(id: $updateAccountId, balance: $balance, status: $status, paidMembership: $paidMembership) {\n    id\n    userId\n    accountNumber\n    balance\n    status\n    paidMembership\n    hasLoan\n    is_deleted\n    deleted_at\n    owner {\n      id\n      first_name\n      last_name\n      other_name\n      email\n      role\n      status\n      lastLogin\n      joinDate\n      contact\n      gender\n      dob\n      hasAccount\n      fullName\n    }\n  }\n}\n"): (typeof documents)["\n  mutation UpdateAccount($updateAccountId: String!, $balance: Int, $status: ACCOUNTSTATUS, $paidMembership: Boolean) {\n  updateAccount(id: $updateAccountId, balance: $balance, status: $status, paidMembership: $paidMembership) {\n    id\n    userId\n    accountNumber\n    balance\n    status\n    paidMembership\n    hasLoan\n    is_deleted\n    deleted_at\n    owner {\n      id\n      first_name\n      last_name\n      other_name\n      email\n      role\n      status\n      lastLogin\n      joinDate\n      contact\n      gender\n      dob\n      hasAccount\n      fullName\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation DeleteAccount($deleteAccountId: String!) {\n  deleteAccount(id: $deleteAccountId)\n}\n"): (typeof documents)["\nmutation DeleteAccount($deleteAccountId: String!) {\n  deleteAccount(id: $deleteAccountId)\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateLoan($loan: LoanInput) {\n    createLoan(loan: $loan) {\n      id\n      accountId\n      amount\n      interestRate\n      status\n      endDate\n      startDate\n      term\n      summary {\n        id\n        loanId\n        monthlyPayment\n        totalInterest\n        remainingBalance\n      }\n      createAt\n      updateAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateLoan($loan: LoanInput) {\n    createLoan(loan: $loan) {\n      id\n      accountId\n      amount\n      interestRate\n      status\n      endDate\n      startDate\n      term\n      summary {\n        id\n        loanId\n        monthlyPayment\n        totalInterest\n        remainingBalance\n      }\n      createAt\n      updateAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateLoan($updateLoanId: String!, $accountId: String, $amount: Int, $interestRate: Float, $status: LOANSTATUS, $endDate: String, $startDate: String, $term: Int) {\n  updateLoan(id: $updateLoanId, accountId: $accountId, amount: $amount, interestRate: $interestRate, status: $status, endDate: $endDate, startDate: $startDate, term: $term) {\n    id\n    accountId\n    amount\n    interestRate\n    status\n    endDate\n    startDate\n    term\n    summary {\n      id\n      loanId\n      monthlyPayment\n      totalInterest\n      remainingBalance\n    }\n    createAt\n    updateAt\n    account {\n      id\n      userId\n      accountNumber\n      balance\n      status\n      paidMembership\n      hasLoan\n      is_deleted\n      deleted_at\n    }\n  }\n}\n"): (typeof documents)["\n  mutation UpdateLoan($updateLoanId: String!, $accountId: String, $amount: Int, $interestRate: Float, $status: LOANSTATUS, $endDate: String, $startDate: String, $term: Int) {\n  updateLoan(id: $updateLoanId, accountId: $accountId, amount: $amount, interestRate: $interestRate, status: $status, endDate: $endDate, startDate: $startDate, term: $term) {\n    id\n    accountId\n    amount\n    interestRate\n    status\n    endDate\n    startDate\n    term\n    summary {\n      id\n      loanId\n      monthlyPayment\n      totalInterest\n      remainingBalance\n    }\n    createAt\n    updateAt\n    account {\n      id\n      userId\n      accountNumber\n      balance\n      status\n      paidMembership\n      hasLoan\n      is_deleted\n      deleted_at\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteLoan($deleteLoanId: String!) {\n  deleteLoan(id: $deleteLoanId)\n}\n"): (typeof documents)["\n  mutation DeleteLoan($deleteLoanId: String!) {\n  deleteLoan(id: $deleteLoanId)\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateTransaction($transaction: TransactionInput) {\n    createTransaction(transaction: $transaction) {\n      id\n      type\n      amount\n      accountId\n      acountName\n      status\n      description\n      loanId\n      createdAt\n      updateAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateTransaction($transaction: TransactionInput) {\n    createTransaction(transaction: $transaction) {\n      id\n      type\n      amount\n      accountId\n      acountName\n      status\n      description\n      loanId\n      createdAt\n      updateAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateTransaction($updateTransactionId: String!, $type: TRANSACTIONTYPE, $amount: Float, $accountId: String, $status: TRANSACTIONSTATUS, $description: String, $loanId: String) {\n  updateTransaction(id: $updateTransactionId, type: $type, amount: $amount, accountId: $accountId, status: $status, description: $description, loanId: $loanId) {\n    id\n    type\n    amount\n    accountId\n    acountName\n    status\n    description\n    loanId\n    createdAt\n    updateAt\n  }\n}\n"): (typeof documents)["\n  mutation UpdateTransaction($updateTransactionId: String!, $type: TRANSACTIONTYPE, $amount: Float, $accountId: String, $status: TRANSACTIONSTATUS, $description: String, $loanId: String) {\n  updateTransaction(id: $updateTransactionId, type: $type, amount: $amount, accountId: $accountId, status: $status, description: $description, loanId: $loanId) {\n    id\n    type\n    amount\n    accountId\n    acountName\n    status\n    description\n    loanId\n    createdAt\n    updateAt\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteTransaction($deleteTransactionId: String!) {\n  deleteTransaction(id: $deleteTransactionId)\n}\n"): (typeof documents)["\n  mutation DeleteTransaction($deleteTransactionId: String!) {\n  deleteTransaction(id: $deleteTransactionId)\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Mutation($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    token\n    user {\n      id\n      first_name\n      last_name\n      other_name\n      email\n      role\n      status\n      lastLogin\n      joinDate\n      contact\n      gender\n      dob\n      hasAccount\n      fullName\n    }\n  }\n}\n"): (typeof documents)["\n  mutation Mutation($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    token\n    user {\n      id\n      first_name\n      last_name\n      other_name\n      email\n      role\n      status\n      lastLogin\n      joinDate\n      contact\n      gender\n      dob\n      hasAccount\n      fullName\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUsers {\n    getUsers {\n      id\n      first_name\n      last_name\n      other_name\n      email\n      role\n      status\n      lastLogin\n      joinDate\n      contact\n      gender\n      dob\n      hasAccount\n      fullName\n      account {\n        id\n        userId\n        accountNumber\n        balance\n        status\n        paidMembership\n        hasLoan\n        is_deleted\n        deleted_at\n      }\n    }\n  }\n\n"): (typeof documents)["\n  query GetUsers {\n    getUsers {\n      id\n      first_name\n      last_name\n      other_name\n      email\n      role\n      status\n      lastLogin\n      joinDate\n      contact\n      gender\n      dob\n      hasAccount\n      fullName\n      account {\n        id\n        userId\n        accountNumber\n        balance\n        status\n        paidMembership\n        hasLoan\n        is_deleted\n        deleted_at\n      }\n    }\n  }\n\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetUserById($getUserByIdId: ID!) {\n  getUserById(id: $getUserByIdId) {\n    id\n    first_name\n    last_name\n    other_name\n    email\n    role\n    status\n    lastLogin\n    joinDate\n    contact\n    gender\n    dob\n    hasAccount\n    fullName\n    account {\n      id\n      userId\n      accountNumber\n      balance\n      status\n      paidMembership\n      hasLoan\n      is_deleted\n      deleted_at\n      loans {\n        id\n        accountId\n        amount\n        interestRate\n        status\n        endDate\n        startDate\n        term\n        summary {\n          id\n          loanId\n          monthlyPayment\n          totalInterest\n          remainingBalance\n        }\n        createAt\n        updateAt\n      }\n      transactions {\n        id\n        type\n        amount\n        accountId\n        acountName\n        status\n        description\n        loanId\n        createdAt\n        updateAt\n      }\n    }\n  }\n}\n\n"): (typeof documents)["\nquery GetUserById($getUserByIdId: ID!) {\n  getUserById(id: $getUserByIdId) {\n    id\n    first_name\n    last_name\n    other_name\n    email\n    role\n    status\n    lastLogin\n    joinDate\n    contact\n    gender\n    dob\n    hasAccount\n    fullName\n    account {\n      id\n      userId\n      accountNumber\n      balance\n      status\n      paidMembership\n      hasLoan\n      is_deleted\n      deleted_at\n      loans {\n        id\n        accountId\n        amount\n        interestRate\n        status\n        endDate\n        startDate\n        term\n        summary {\n          id\n          loanId\n          monthlyPayment\n          totalInterest\n          remainingBalance\n        }\n        createAt\n        updateAt\n      }\n      transactions {\n        id\n        type\n        amount\n        accountId\n        acountName\n        status\n        description\n        loanId\n        createdAt\n        updateAt\n      }\n    }\n  }\n}\n\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAccounts {\n    getAccounts {\n      id\n      userId\n      accountNumber\n      balance\n      status\n      paidMembership\n      hasLoan\n      is_deleted\n      deleted_at\n      owner {\n        id\n        first_name\n        last_name\n        other_name\n        email\n        role\n        status\n        lastLogin\n        joinDate\n        contact\n        gender\n        dob\n        hasAccount\n        fullName\n      }\n      loans {\n        id\n        amount\n        interestRate\n        status\n        endDate\n        startDate\n        term\n        summary {\n          id\n          monthlyPayment\n          totalInterest\n          remainingBalance\n        }\n        createAt\n        updateAt\n      }\n      transactions {\n        id\n        type\n        amount\n        status\n        description\n        loanId\n        createdAt\n        updateAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAccounts {\n    getAccounts {\n      id\n      userId\n      accountNumber\n      balance\n      status\n      paidMembership\n      hasLoan\n      is_deleted\n      deleted_at\n      owner {\n        id\n        first_name\n        last_name\n        other_name\n        email\n        role\n        status\n        lastLogin\n        joinDate\n        contact\n        gender\n        dob\n        hasAccount\n        fullName\n      }\n      loans {\n        id\n        amount\n        interestRate\n        status\n        endDate\n        startDate\n        term\n        summary {\n          id\n          monthlyPayment\n          totalInterest\n          remainingBalance\n        }\n        createAt\n        updateAt\n      }\n      transactions {\n        id\n        type\n        amount\n        status\n        description\n        loanId\n        createdAt\n        updateAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAccountById($getAccountByIdId: String!) {\n    getAccountById(id: $getAccountByIdId) {\n      id\n      userId\n      accountNumber\n      balance\n      status\n      paidMembership\n      hasLoan\n      is_deleted\n      deleted_at\n      owner {\n        id\n        first_name\n        last_name\n        other_name\n        email\n        role\n        status\n        lastLogin\n        joinDate\n        contact\n        gender\n        dob\n        hasAccount\n        fullName\n      }\n      loans {\n        id\n        accountId\n        amount\n        interestRate\n        status\n        endDate\n        startDate\n        term\n        summary {\n          id\n          monthlyPayment\n          totalInterest\n          remainingBalance\n        }\n        createAt\n        updateAt\n      }\n      transactions {\n        id\n        type\n        amount\n        accountId\n        acountName\n        status\n        description\n        loanId\n        createdAt\n        updateAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAccountById($getAccountByIdId: String!) {\n    getAccountById(id: $getAccountByIdId) {\n      id\n      userId\n      accountNumber\n      balance\n      status\n      paidMembership\n      hasLoan\n      is_deleted\n      deleted_at\n      owner {\n        id\n        first_name\n        last_name\n        other_name\n        email\n        role\n        status\n        lastLogin\n        joinDate\n        contact\n        gender\n        dob\n        hasAccount\n        fullName\n      }\n      loans {\n        id\n        accountId\n        amount\n        interestRate\n        status\n        endDate\n        startDate\n        term\n        summary {\n          id\n          monthlyPayment\n          totalInterest\n          remainingBalance\n        }\n        createAt\n        updateAt\n      }\n      transactions {\n        id\n        type\n        amount\n        accountId\n        acountName\n        status\n        description\n        loanId\n        createdAt\n        updateAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetLoans {\n    getLoans {\n      id\n      accountId\n      amount\n      interestRate\n      status\n      endDate\n      startDate\n      term\n      summary {\n        id\n        loanId\n        monthlyPayment\n        totalInterest\n        remainingBalance\n      }\n      createAt\n      updateAt\n      account {\n        id\n        userId\n        accountNumber\n        balance\n        status\n        paidMembership\n        hasLoan\n        is_deleted\n        deleted_at\n        owner {\n          id\n          first_name\n          last_name\n          other_name\n          email\n          role\n          status\n          lastLogin\n          joinDate\n          contact\n          gender\n          dob\n          hasAccount\n          fullName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLoans {\n    getLoans {\n      id\n      accountId\n      amount\n      interestRate\n      status\n      endDate\n      startDate\n      term\n      summary {\n        id\n        loanId\n        monthlyPayment\n        totalInterest\n        remainingBalance\n      }\n      createAt\n      updateAt\n      account {\n        id\n        userId\n        accountNumber\n        balance\n        status\n        paidMembership\n        hasLoan\n        is_deleted\n        deleted_at\n        owner {\n          id\n          first_name\n          last_name\n          other_name\n          email\n          role\n          status\n          lastLogin\n          joinDate\n          contact\n          gender\n          dob\n          hasAccount\n          fullName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetTransactions {\n    getTransactions {\n      id\n      type\n      amount\n      accountId\n      acountName\n      status\n      description\n      loanId\n      createdAt\n      updateAt\n      account {\n        id\n        accountNumber\n        owner {\n          fullName\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetTransactions {\n    getTransactions {\n      id\n      type\n      amount\n      accountId\n      acountName\n      status\n      description\n      loanId\n      createdAt\n      updateAt\n      account {\n        id\n        accountNumber\n        owner {\n          fullName\n          id\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;